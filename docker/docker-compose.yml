---
version: '2.3'
services:
  zookeeper:
    container_name: workshop-zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    
  kafka:
    container_name: workshop-kafka
    image: confluentinc/cp-server:7.5.0
    depends_on:
      - zookeeper
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'true'
      KAFKA_CONFLUENT_TELEMETRY_API_KEY: 's'
      KAFKA_CONFLUENT_TELEMETRY_API_SECRET: 's/mQHp1Plp+s+t+LTQZ'
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: workshop-schema-registry
    ports:
      - 8081:8081
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO


  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.2-7.5.0
    container_name: workshop-connect
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.2.2.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components,/local-connect-jars'
      CONNECT_CONFLUENT_TELEMETRY_ENABLED: true
      CONNECT_CONFLUENT_TELEMETRY_API_KEY: 'g'
      CONNECT_CONFLUENT_TELEMETRY_API_SECRET: 'f/mQHp1Plfp+f+hMJuD1b7YZRlhZl51+LTQZ'
      
    volumes:
      - ./confluent-hub-components:/local-connect-jars
      - ./datagen:/datagen
    command: 
      - /bin/bash
      - -c 
      - |

        # Now launch Kafka Connect
        /etc/confluent/docker/run &
        #
        echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -ne 200 ] ; do 
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) " (waiting for 200)"
          sleep 5 
        done
        echo "Waiting for Schema Registry to start listening on schema-registry:8081 ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) -eq 000 ] ; do 
          echo -e $$(date) " Schema Registry listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) " (waiting for != 000)"
          sleep 5 
        done
        #
        echo "Creating datagen connector 1"
        curl -s -X PUT -H  "Content-Type:application/json" http://localhost:8083/connectors/source-aml-status-change/config \
            -d '{
            "connector.class": "io.confluent.kafka.connect.datagen.DatagenConnector",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "kafka.topic": "AML_Status",
            "max.interval": 1000,
            "schema.filename": "/datagen/aml_service.avro",
            "schema.keyfield": "payment_id"
          }'
        sleep 2
        echo "Creating datagen connector 2"
        curl -s -X PUT -H  "Content-Type:application/json" http://localhost:8083/connectors/source-funds-status-change/config \
            -d '{
            "connector.class": "io.confluent.kafka.connect.datagen.DatagenConnector",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "kafka.topic": "Funds_Status",
            "max.interval": 1500,
            "schema.filename": "/datagen/funds_service.avro",
            "schema.keyfield": "payment_id"
          }'
        sleep 2
        echo "Creating datagen connector 3"
        curl -s -X PUT -H  "Content-Type:application/json" http://localhost:8083/connectors/source-payment-instruction/config \
            -d '{
            "connector.class": "io.confluent.kafka.connect.datagen.DatagenConnector",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "kafka.topic": "Payment_Instruction",
            "max.interval": 1000,
            "schema.filename": "/datagen/payment_service.avro",
            "schema.keyfield": "payment_id"
          }'
        # Don't let the container die
        sleep infinity


  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.0
    container_name: workshop-ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    volumes:
      - ./extensions:/etc/ksqldb/ext
    ports:
      - 8088:8088
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksqldb/ext/"
      KSQL_CUB_KAFKA_TIMEOUT: 120
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_SERVICE_ID: workshop_
      KSQL_KSQL_CONNECT_URL: http://connect:8083
      # uncomment this one to launch a Connect worker INSIDE the KSQL JVM
      # KSQL_KSQL_CONNECT_WORKER_CONFIG: /etc/ksql/worker.properties
      KSQL_KSQL_QUERIES_FILE:
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_PARTITIONS: 2
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      KSQL_CONFLUENT_TELEMETRY_ENABLED: true
      KSQL_CONFLUENT_TELEMETRY_API_KEY: 's'
      KSQL_CONFLUENT_TELEMETRY_API_SECRET: 's/s+jowmE+hMJuD1b7YZRlhZl51+LTQZ'
    healthcheck:
      disable: true


  ksqldb-cli:
    # *-----------------------------*
    # To connect to the KSQL CLI: 
    #   docker exec -it ksql-cli ksql http://ksqldb-server:8088
    # *-----------------------------*
    container_name: workshop-ksqldb-cli
    image: confluentinc/cp-ksqldb-cli:7.5.0
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    

  
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: workshop-control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
      CONTROL_CENTER_MODE_ENABLE: management #Setear así para que quede en mgmt mode . Modos = management y all
      

